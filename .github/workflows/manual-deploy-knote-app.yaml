name: Prod - Manual Deploy Application

on: [workflow_dispatch]

env:
  EKS_CLUSTER_NAME: zilliqa-dev
  AWS_REGION: eu-west-1
  APP_NAME: knote

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout knote repo
            id: checkout-knote-repo
            uses: actions/checkout@v2
            with:
              fetch-depth: 0
              repository: 'learnk8s/knote-js'
              ref: master
              path: '04-05'

          - name: Extract application version
            id: gitversion
            shell: bash
            run: echo "##[set-output name=assemblySemVer;]$(echo ${GITHUB_REF#refs/heads/}-${GITHUB_SHA:0:8} | tr -sc '[:alnum:]\n-' _)"

          - name: Create AWS profile
            uses: Fooji/create-aws-profile-action@v1
            with:
              profile: zilliqa-infra
              region: eu-west-1
              key: ${{ secrets.AWS_ACCESS_KEY_ID }}
              secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          # - name: Configure AWS credentials
          #   uses: aws-actions/configure-aws-credentials@v1
          #   with:
          #       aws-region: ${{ env.AWS_REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1

          - name: Create ECR repo if missing
            uses: byu-oit/github-action-create-ecr-repo-if-missing@v1
            with:
                DOCKER_REPO_NAME: ${{ env.APP_NAME }}

          - name: Set image version and save image tag
            id: imageversion
            run: |
                echo "VERSIONED_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ steps.gitversion.outputs.assemblySemVer }}" >> $GITHUB_ENV
                echo "${{ steps.gitversion.outputs.assemblySemVer }}" >> version.txt
          - name: Upload versioned_image artifact
            uses: actions/upload-artifact@v2
            with:
                name: image-tag
                path: version.txt

          - name: Set up Docker Buildx
            id: buildx
            uses: docker/setup-buildx-action@v1

          - name: Cache Docker layers
            id: cache-docker
            uses: actions/cache@v2
            with:
                path: /tmp/.buildx-cache
                key: ${{ env.APP_NAME }}-${{ hashFiles('Dockerfile') }}-${{ hashFiles('package.json') }}-${{ env.GITHUB_REF }}
                restore-keys: |
                    ${{ env.APP_NAME }}-${{ hashFiles('Dockerfile') }}-${{ hashFiles('package.json') }}-
                    ${{ env.APP_NAME }}-${{ hashFiles('Dockerfile') }}-
            continue-on-error: true
            timeout-minutes: 1

          - name: Build Image
            id: build-docker
            uses: docker/build-push-action@v2
            with:
                builder: ${{ steps.buildx.outputs.name }}
                context: 04-05/Dockerfile
                tags: ${{ env.VERSIONED_IMAGE }}
                push: true
                load: false
                cache-from: type=local,src=/tmp/.buildx-cache
                cache-to: type=local,dest=/tmp/.buildx-cache
                build-args: |
                    PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}
                    APP_VERSION=${{ steps.gitversion.outputs.assemblySemVer }}

    deploy_app:
        needs: build-and-push
        runs-on: ubuntu-latest
        steps:
          - name: Checkout knote repo
            id: checkout-knote-repo
            uses: actions/checkout@v2
            with:
                fetch-depth: 0
                repository: 'learnk8s/knote-js'
                ref: master
                path: '04-05'

          - name: Turnstyle
            id: turnstyle
            uses: softprops/turnstyle@v1
            with:
                continue-after-seconds: 1200
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          - name: Setup kubectl
            id: setup-kubectl
            uses: azure/setup-kubectl@v3

          - name: Download artifact
            id: download-artifact
            uses: actions/download-artifact@v2
            with:
                name: image-tag

          - name: Set image tag env var
            run: |
                echo "IMAGE_TAG=$(cat version.txt)" >> $GITHUB_ENV

          - name: Deploy to kubernetes cluster
            id: deploy
            run: |
                aws eks update-kubeconfig --name ${{ env.APPLICATION_NAME }} --region ${{ env.AWS_REGION }}
                cd 04-05
                kubectl apply -f .
            